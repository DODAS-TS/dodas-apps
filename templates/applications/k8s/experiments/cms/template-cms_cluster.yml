tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - dodas_custom_types: https://raw.githubusercontent.com/DODAS-TS/dodas-templates/master/tosca-types/dodas_custom_apps/exp/cms_htc_type.yml 

description: TOSCA template for a complete CMS computing cluster on top of K8s orchestrator

topology_template:

  inputs:

    number_of_masters:
      type: integer
      default: 1

    num_cpus_master: 
      type: integer
      default: 2

    mem_size_master:
      type: string
      default: "4 GB"

    number_of_slaves:
      type: integer
      default: 2 

    num_cpus_slave: 
      type: integer
      default: 4

    mem_size_slave:
      type: string
      default: "8 GB"

    server_image:
      type: string
      #default: "ost://openstack.fisica.unipg.it/cb87a2ac-5469-4bd5-9cce-9682c798b4e4"
      default: "ost://horizon.cloud.cnaf.infn.it/3d993ab8-5d7b-4362-8fd6-af1391edca39"
      #default: "ost://cloud.recas.ba.infn.it/1113d7e8-fc5d-43b9-8d26-61906d89d479"

    htcondor_docker_image:
      type: string
      default: "dodasts/cms"

    iam_token:
      type: string
      default: "changeme"

    cms_config_cms_local_site:
      type: string
      default: "T3_IT_Opportunistic_xcache"
      
    cms_config_stageoutsite:
      type: string
      default: "T1_IT_CNAF"
      
    cms_config_stageoutprotocol:
      type: string
      default: "srmv2"

    cms_config_stageoutcommand:
      type: string
      default: "gfal2"

    cms_config_phedexnode:
      type: string
      default: "T1_IT_CNAF_Disk"

    cms_xrd_readserver:
      type: string
      default: "cloud-vm90.cloud.cnaf.infn.it:31194"

  node_templates:

    helm_htcondor:
      type: tosca.nodes.DODAS.HelmInstall.HTCondorCMS
      properties:
        repos:
          - { name: dodas, url: "https://dodas-ts.github.io/helm_charts" }
        name: "htcondor"
        chart: "dodas/htcondor"
        k8s_master_ip: { get_attribute: [ k8s_master_server , private_address, 0 ] }
        htcondor_docker_image:  { get_input: htcondor_docker_image }
        iam_token:  { get_input: iam_token }
        iam_client_id: CHANGEME
        iam_client_secret: CHANGEME
        cms_config_cms_local_site: { get_input: cms_config_cms_local_site }
        cms_config_stageoutsite: { get_input: cms_config_stageoutsite }
        cms_config_stageoutprotocol: { get_input: cms_config_stageoutprotocol }
        cms_config_stageoutcommand: { get_input: cms_config_stageoutcommand }
        cms_config_phedexnode: { get_input: cms_config_phedexnode }
        cms_xrd_readserver: { get_input: cms_xrd_readserver }
        cms_config_mysquid_host: { get_attribute: [ k8s_master_server , private_address, 0 ] }

      requirements:
        - host: k8s_master_server
        - dependency: k8s_slave_wn

    k8s_master:
      type: tosca.nodes.DODAS.FrontEnd.Kubernetes
      properties:
        admin_token: testme
      requirements:
        - host: k8s_master_server

    k8s_slave_wn:
      type: tosca.nodes.DODAS.WorkerNode.Kubernetes 
      properties:
        front_end_ip: { get_attribute: [ k8s_master_server, private_address, 0 ] }
      requirements:
        - host: k8s_server_wn

    k8s_master_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            ports:
              kube_port:
                protocol: tcp
                source: 30443
        scalable:
          properties:
            count: { get_input: number_of_masters }
        host:
          properties:
            num_cpus: { get_input: num_cpus_master }
            mem_size: { get_input: mem_size_master } 
        os:
          properties:
            image: { get_input: server_image }

    k8s_server_wn:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PRIVATE
        scalable:
          properties:
            count: { get_input: number_of_slaves }
        host:
          properties:
            num_cpus: { get_input: num_cpus_slave }
            mem_size: { get_input: mem_size_slave } 
        os:
          properties:
            image: { get_input: server_image }

  outputs:
    k8s_endpoint:
      value: { concat: [ 'https://', get_attribute: [ k8s_master_server, public_address, 0 ], ':30443' ] }
    status:
      value: { get_operation_output: [ helm_htcondor, Standard, stop, STATE ] }
