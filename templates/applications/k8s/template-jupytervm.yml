tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://raw.githubusercontent.com/dodas-ts/dodas-templates/master/tosca-types/dodas_custom_apps/jupyter_type.yml
description: TOSCA template for a complete Spark+Jupyter computing cluster on top of K8s orchestrator

topology_template:

  inputs:

    num_cpus: 
      type: integer
      default: 4

    mem_size:
      type: string
      default: "8 GB"

    server_image:
      type: string
      #default: "ost://openstack.fisica.unipg.it/cb87a2ac-5469-4bd5-9cce-9682c798b4e4"
      #default: "ost://horizon.cloud.cnaf.infn.it/3d993ab8-5d7b-4362-8fd6-af1391edca39"
      default: "ost://cloud.recas.ba.infn.it/1113d7e8-fc5d-43b9-8d26-61906d89d479"

      vm_user:
        type: string
        default: "cloudadm"
      jupyter_port:
        type: string
        default: "8888"
      jupyter_token:
        type: string
        default: "testme"
      persistence:
        type: string
        default: "s3"
      s3_access_id:
        type: string
        default: "CHANGEME"
      s3_access_key:
        type: string
        default: "CHANGEME"
      s3_bucket:
        type: string
        default: "CHANGEME"
      s3_endpoint:
        type: string
        default: "http://localhost:9000"
      s3_mount_prefix:
        type: string
        default: ""
                  
  node_templates:

    helm_install:
      type: tosca.nodes.DODAS.JupyterVM
      properties:
        vm_user: { get_input: helm_values }
        jupyter_port: { get_input: jupyter_port }
        jupyter_token: { get_input: jupyter_token }
        persistence: { get_input: persistence }
        s3_access_id: { get_input: s3_access_id }
        s3_access_key: { get_input: s3_access_key }
        s3_bucket: { get_input: s3_bucket }
        s3_endpoint: { get_input: s3_endpoint }
        s3_mount_prefix:  { get_input: s3_mount_prefix }
      requirements:
        - host: vm_server

    vm_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            ports:
              dashboard:
              jupyter:
                protocol: tcp
                source: 8888
        scalable:
          properties:
            count: { get_input: number_of_masters }
        host:
          properties:
            #instance_type:  m1.medium
            num_cpus: { get_input: num_cpus_master }
            mem_size: { get_input: mem_size_master } 
        os:
          properties:
            image: { get_input: server_image }
