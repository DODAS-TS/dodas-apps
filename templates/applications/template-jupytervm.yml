tosca_definitions_version: tosca_simple_yaml_1_2

imports:
  - indigo_custom_types: https://raw.githubusercontent.com/dodas-ts/dodas-templates/master/tosca-types/dodas_custom_apps/jupyter_type.yml

description: TOSCA template for a persistent Jupyter VM on s3

topology_template:

  inputs:

    num_cpus:
      type: integer
      default: 4
    mem_size:
      type: string
      default: "8 GB"
    server_image:
      type: string
      default: "ost://dashboard.cloud.infn.it/1c17b93d-abf4-479d-a63a-f22be7571ebe"

    vm_user:
      type: string
      default: "cloudadm"
    jupyter_port:
      type: string
      default: "8888"
    jupyter_token:
      type: string
      default: "testme"
    persistence:
      type: string
      description: "Choose the  s3 mount mode: 's3-goofys' (suggested) or 's3-contents'"
      default: "CHANGEME"
    s3_access_id:
      type: string
      default: "CHANGEME"
    s3_access_key:
      type: string
      default: "CHANGEME"
    s3_bucket:
      type: string
      default: "CHANGEME"
    s3_endpoint:
      type: string
      default: "http://CHANGEME:9000"
    s3_mount_prefix:
      type: string
      default: ""

  node_templates:

    jupyter_install:
      type: tosca.nodes.DODAS.JupyterVM
      properties:
        vm_user: { get_input: vm_user }
        jupyter_port: { get_input: jupyter_port }
        jupyter_token: { get_input: jupyter_token }
        persistence: { get_input: persistence }
        s3_access_id: { get_input: s3_access_id }
        s3_access_key: { get_input: s3_access_key }
        s3_bucket: { get_input: s3_bucket }
        s3_endpoint: { get_input: s3_endpoint }
        s3_mount_prefix:  { get_input: s3_mount_prefix }
      requirements:
        - host: vm_server

    vm_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            ports:
              jupyter:
                protocol: tcp
                source: 8888
        scalable:
          properties:
            count: 1
        host:
          properties:
            #instance_type:  m1.medium
            num_cpus: { get_input: num_cpus }
            mem_size: { get_input: mem_size }
        os:
          properties:
            image: { get_input: server_image }