tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - dodas_custom_types: https://raw.githubusercontent.com/dodas-ts/dodas-templates/master/tosca-types/dodas_custom_apps/htc_type.yml 

description: TOSCA template for a complete CMS computing cluster on top of K8s orchestrator

topology_template:

  inputs:

    number_of_masters:
      type: integer
      default: 1

    num_cpus_master: 
      type: integer
      default: 2

    mem_size_master:
      type: string
      default: "4 GB"

    number_of_slaves:
      type: integer
      default: 3 

    num_cpus_slave: 
      type: integer
      default: 4

    mem_size_slave:
      type: string
      default: "8 GB"

    server_image:
      type: string
      #default: "ost://openstack.fisica.unipg.it/cb87a2ac-5469-4bd5-9cce-9682c798b4e4"
      #default: "ost://horizon.cloud.cnaf.infn.it/3d993ab8-5d7b-4362-8fd6-af1391edca39"
      default: "ost://cloud.recas.ba.infn.it/1113d7e8-fc5d-43b9-8d26-61906d89d479"

    nfs_path:
      type: string
      default: "/data/my-storage-area"

    nfs_master_ip:
      type: string
      default: "172.30.136.4"

    htcondor_docker_image:
      type: string
      default: "dodasts/htcondor"

    proxycache_docker_image:
      type: string
      default: "dodasts/ttscache"

    iam_token:
      type: string
      default: "CHANGEME"

    helm_htcondor_values: 
      type: string
      default: |
        condorHost: {{ condor_host }}
        ccbHost: {{ ccb_address }}
        proxyCacheHost: {{ k8s_master_ip }}
        ttsCache:
          image: {{ proxycache_docker_image }}
          tag: v1.1.4-dodas
          iamToken: {{ iam_token }}
          iamClientId: CHANGEME 
          iamClientSecret: CHANGEME 
        htcSchedd:
          image: {{ htcondor_docker_image }}
          tag: v1.0.0.rc1
          networkInterface: {{ schedd_netinterface }}
          persistence:
            storageClass: local-path
        htcMaster:
          image: {{ htcondor_docker_image }}
          tag: v1.0.0.rc1
          networkInterface: {{ condor_host }}
        htcWn:
          image: {{ htcondor_docker_image }}
          tag: v1.0.0.rc1
        nfs:
          enabled: false 
          # size: 2Gi
          # claimSize: 950Mi
          # # Put here the nfs master address
          # server: {{ nfs_master_ip }}
          # path: {{ nfs_path }}
          # persistence:
          #   claimSize: 950Mi
        cvmfs:
          enabled: false 
          # image: dodasts/cvmfs
          # tag: latest
          # pullPolicy: IfNotPresent
          # replicas: 1

          # # List of repos to be mounted
          # repoList: spiga.local.repo 

          # privKey: 
          #   - name: spiga
          #     filename: spiga.local.repo.pub
          #     path: ""
          #     content: | 
          #       -----BEGIN PUBLIC KEY-----
          #       -----END PUBLIC KEY------
          # defaultLocalConfig:
          #   file: spiga.local.repo.conf
          #   content: |
          #     CVMFS_SERVER_URL=http://172.30.136.3/cvmfs/spiga.local.repo
          #     CVMFS_PUBLIC_KEY=/etc/cvmfs/keys/spiga.local.repo.pub
          #     CVMFS_HTTP_PROXY=DIRECT

  node_templates:

    helm_htcondor:
      type: tosca.nodes.DODAS.HelmInstall.HTCondor
      properties:
        repos:
          - { name: dodas, url: "https://dodas-ts.github.io/helm_charts" }
        name: "htcondor"
        chart: "dodas/htcondor"
        kubeconfig_path: /var/lib/rancher/k3s/server/cred/admin.kubeconfig
        values_file: { get_input: helm_htcondor_values }
        condor_host: { get_attribute: [ k3s_server_ccb , private_address, 0 ] }
        ccb_address: { get_attribute: [ k3s_server_ccb , private_address, 0 ] }
        schedd_netinterface: { get_attribute: [ k3s_server_schedd , private_address, 0 ] }
        k8s_master_ip: { get_attribute: [ k3s_master_server , private_address, 0 ] }
        htcondor_docker_image:  { get_input: htcondor_docker_image }
        proxycache_docker_image:  { get_input: proxycache_docker_image }
        iam_token:  { get_input: iam_token }
        nfs_master_ip: { get_input: nfs_master_ip }
        nfs_path: { get_input: nfs_path }
      requirements:
        - host: k3s_master_server
        - dependency: k3s_slave_ccb

    k3s_master:
      type: tosca.nodes.DODAS.k3s 
      properties:
        master_ip: { get_attribute: [ k3s_master_server, private_address, 0 ] }
        mode: server
        kube_version: 1.17.0
      requirements:
        - host: k3s_master_server

    k3s_slave_ccb:
      type: tosca.nodes.DODAS.k3s 
      properties:
        master_ip: { get_attribute: [ k3s_master_server, private_address, 0 ] }
        mode: node 
        kube_version: 1.17.0
        node_label: condor=ccb
      requirements:
        - host: k3s_server_ccb
        - dependency: k3s_master

    k3s_slave_schedd:
      type: tosca.nodes.DODAS.k3s 
      properties:
        master_ip: { get_attribute: [ k3s_master_server, private_address, 0 ] }
        mode: node 
        kube_version: 1.17.0
        node_label: condor=schedd
      requirements:
        - host: k3s_server_schedd
        - dependency: k3s_master

    k3s_slave_wn:
      type: tosca.nodes.DODAS.k3s 
      properties:
        master_ip: { get_attribute: [ k3s_master_server, private_address, 0 ] }
        mode: node 
        kube_version: 1.17.0
      requirements:
        - host: k3s_server_wn
        - dependency: k3s_master

    k3s_master_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            # network_name: infn-farm.PUBLIC
            network_name: PUBLIC
            ports:
              kube_port:
                protocol: tcp
                source: 30443
        scalable:
          properties:
            count: { get_input: number_of_masters }
        host:
          properties:
            # instance_type:  m1.medium
            num_cpus: { get_input: num_cpus_master }
            mem_size: { get_input: mem_size_master } 
        os:
          properties:
            image: { get_input: server_image }

    k3s_server_ccb:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            ports:
              collector:
                protocol: tcp
                source: 9618
        scalable:
          properties:
            count: 1
        host:
          properties:
            #instance_type:  m1.medium
            num_cpus: { get_input: num_cpus_slave }
            mem_size: { get_input: mem_size_slave } 
        os:
          properties:
            # image: "ost://openstack.fisica.unipg.it/d9a41aed-3ebf-42f9-992e-ef0078d3de95"
            image: { get_input: server_image }

    k3s_server_schedd:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            ports:
              schedd:
                protocol: tcp
                source: 9618
              registration:
                protocol: tcp
                source: 48080
        scalable:
          properties:
            count: 1
        host:
          properties:
            #instance_type:  m1.medium
            num_cpus: { get_input: num_cpus_slave }
            mem_size: { get_input: mem_size_slave } 
        os:
          properties:
            # image: "ost://openstack.fisica.unipg.it/d9a41aed-3ebf-42f9-992e-ef0078d3de95"
            image: { get_input: server_image }

    k3s_server_wn:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            #network_name: test-net.PRIVATE
            network_name: PRIVATE
        scalable:
          properties:
            count: { get_input: number_of_slaves }
        host:
          properties:
            #instance_type:  m1.medium
            num_cpus: { get_input: num_cpus_slave }
            mem_size: { get_input: mem_size_slave } 
        os:
          properties:
            # image: "ost://openstack.fisica.unipg.it/d9a41aed-3ebf-42f9-992e-ef0078d3de95"
            image: { get_input: server_image }

  outputs:
    k8s_endpoint:
      value: { concat: [ 'https://', get_attribute: [ k3s_master_server, public_address, 0 ], ':30443' ] }
