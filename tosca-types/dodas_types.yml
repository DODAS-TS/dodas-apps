tosca_definitions_version: tosca_simple_yaml_1_2

# Import Indigo datacloud base types
imports:
  - https://raw.githubusercontent.com/indigo-dc/tosca-types/refactor_dodas/custom_types.yaml

capability_types:

# Index
  # - KUBERNETES APPLICATION TOOLS
  # -ORCHESTRATORS: k3s and k8s

node_types:

  # KUBERNETES APPLICATION TOOLS
  ############################################################
  # - tosca.nodes.DODAS.HelmInstall
  # - tosca.nodes.DODAS.KubeCreate


  tosca.nodes.DODAS.HelmInstall:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      name:
        type: string
        description: name of the helm deployment
        required: yes
      chart:
        type: string
        description: chart name
        required: yes
      repos:
        type: list
        entry_schema:
          type: map
          entry_schema:
            type: string
      values_file:
        type: string
        description: values.yaml file content
        required: no
        default: ""
      values_url:
        type: string
        description: values.yaml file url
        required: no
        default: ""
      kubeconfig_path:
        type: string
        required: no
        default: /etc/kubernetes/admin.conf
      inline_options:
        type: string
        required: no
        default: ""
      helm_version:
        type: string
        required: no
        default: "v2"
      role_name:
        type: string
        required: no
        default: dodas.helm
    artifacts:
      helm_config_role:
        file: dodas.helm,v2.0.0-rc5
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        start:
          implementation: https://raw.githubusercontent.com/dodas-ts/dodas-apps/master/tosca-types/dodas_artifacts/ansible.yaml
          inputs:
            role_name:  { get_property: [ SELF, role_name ] }
            name: { get_property: [ SELF, name ] }
            chart: { get_property: [ SELF, chart ] }
            values_file: { get_property: [ SELF, values_file ] }
            values_url: { get_property: [ SELF, values_url ] }
            inline_options: { get_property: [ SELF, inline_options ] }
            kubeconfig_path: { get_property: [ SELF, kubeconfig_path ] }
            repos: { get_property: [ SELF, repos ] }
            helm_version: { get_property: [ SELF, helm_version ] }

  tosca.nodes.DODAS.KubeCreate:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      name:
        type: string
        description: name of the helm deployment
        required: no
        default: ""
      namespace:
        type: string
        required: no
        default: default
      url:
        type: string
        required: no
        default: ""
      manifest_file:
        type: string
        required: no
        default: ""
      inline_options:
        type: string
        required: no
        default: ""
      externalParams:
        type: list
        required: no
        entry_schema:
          type: string
      role_name:
        type: string
        required: no
        default: dodas.kubecreate
    artifacts:
      kubecreate_config_role:
        file: dodas.kubecreate,v2.0.0-rc4
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        start:
          implementation: https://raw.githubusercontent.com/dodas-ts/dodas-apps/master/tosca-types/dodas_artifacts/ansible.yaml
          inputs:
            role_name: { get_property: [ SELF, role_name ] }
            name: { get_property: [ SELF, name ] }
            namespace:   { get_property: [ SELF, namespace ] }
            url: { get_property: [ SELF, url ] }
            inline_options: { get_property: [ SELF, inline_options ] }
            manifest_file: { get_property: [ SELF, manifest_file ] }
            externalParams: { get_property: [ SELF, externalParams ] }

  # ORCHESTRATORS
  ############################################################
  # - tosca.nodes.DODAS.k3s
  # - tosca.nodes.DODAS.WorkerNode.Kubernetes
  # - tosca.nodes.DODAS.FrontEnd.Kubernetes

  tosca.nodes.DODAS.k3s:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      master_ip:
        type: string
        required: yes
      mode:
        type: string
        required: yes
      k3s_version:
        type: string
        required: no
        default: v1.17.0+k3s.1
      node_label:
        type: string
        required: no
        default: unlabelled=true
      role_name:
        type: string
        required: no
        default: dodas.k3s
    artifacts:
      k3s_config_role:
        file: dodas.k3s,v2.0.0-rc2
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        start:
          implementation: https://raw.githubusercontent.com/dodas-ts/dodas-apps/master/tosca-types/dodas_artifacts/ansible.yaml
          inputs:
            master_ip: { get_property: [ SELF, master_ip ] }
            mode: { get_property: [ SELF, mode ] }
            node_label: { get_property: [ SELF, node_label ] }
            role_name: { get_property: [ SELF, role_name ] }
            k3s_version: { get_property: [ SELF, k3s_version ]  }

  tosca.nodes.DODAS.WorkerNode.Kubernetes:
    derived_from: tosca.nodes.indigo.LRMS.WorkerNode
    metadata:
      icon: /images/kubernetesWN.png
    properties:
      admin_username:
        required: no
        type: string
        default: kubeuser
      admin_token:
        required: no
        type: string
        default: some_insecure_token
      kubelet_extra_args:
        required: no
        type: string
        default: ""
      kube_version:
        required: no
        type: string
        default: 1.19.6
      nodelabel:
        type: string
        required: no
        default: "testme=true"
    artifacts:
      docker_role:
        file: indigo-dc.docker,2.1.2-beta
        type: tosca.artifacts.AnsibleGalaxy.role
      kube_role:
        file: dodas.kubernetes,v2.1.0-oidc-pre1
        type: tosca.artifacts.AnsibleGalaxy.role
      nfs_role:
        file: indigo-dc.nfs
        type: tosca.artifacts.AnsibleGalaxy.role
      openvpn_role:
        file: indigo-dc.openvpn
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/dodas-ts/dodas-apps/master/tosca-types/dodas_artifacts/kube_wn_install.yml
          inputs:
            kube_front_end_ip: { get_property: [ SELF, front_end_ip ] }
            wn_hybrid_cluster:  { get_property: [ SELF, hybrid] }
            kubelet_extra_args: { get_property: [ SELF, kubelet_extra_args] }
            kube_version:  { get_property: [ SELF, kube_version] }
            kube_admin_username:  { get_property: [ SELF, admin_username] }
            kube_admin_token:  { get_property: [ SELF, admin_token] }
            nodelabel: { get_property: [ SELF, nodelabel] }

  tosca.nodes.DODAS.FrontEnd.Kubernetes:
    derived_from: tosca.nodes.indigo.LRMS.FrontEnd
    metadata:
      icon: /images/kubernetesFE.png
    properties:
      oidc_user:
        required: yes
        type: string
      admin_username:
        required: no
        type: string
        default: kubeuser
      admin_token:
        required: no
        type: string
        default: some_insecure_token
      kube_version:
        required: no
        type: string
        default: 1.19.6
      kube_deploy_dashboard:
        required: no
        type: string
        default: k8s
    artifacts:
      docker_role:
        file: indigo-dc.docker,2.1.2-beta
        type: tosca.artifacts.AnsibleGalaxy.role
      kube_role:
        file: dodas.kubernetes,v2.1.0-oidc-pre1
        type: tosca.artifacts.AnsibleGalaxy.role
      nfs_role:
        file: indigo-dc.nfs
        type: tosca.artifacts.AnsibleGalaxy.role
      openvpn_role:
        file: indigo-dc.openvpn
        type: tosca.artifacts.AnsibleGalaxy.role
    capabilities:
        lrms:
          type: tosca.capabilities.indigo.LRMS.Kubernetes
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/dodas-ts/dodas-apps/oidc-test/tosca-types/dodas_artifacts/kube_fe_install.yml
          inputs:
            kube_front_end_ip: { get_attribute: [ HOST, private_address, 0 ] }
            kube_api_server_public: { get_attribute: [ HOST, public_address, 0 ] }
            fe_hybrid_cluster:  { get_property: [ SELF, hybrid] }
            kube_admin_username:  { get_property: [ SELF, admin_username] }
            kube_admin_token:  { get_property: [ SELF, admin_token] }
            kube_version:  { get_property: [ SELF, kube_version] }
            kube_deploy_dashboard: { get_property: [ SELF, kube_deploy_dashboard ] }
            oidc_user: { get_property: [ SELF, oidc_user ] }

  #TO IMPROVE with DIEGO
  tosca.nodes.indigo.NfsClient:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      remote_path:
        type: string
        required: yes
      local_path:
        type: string
        required: yes
      server_host:
        type: string
        required: yes
    artifacts:
      nfs_role:
        file: indigo-dc.nfs
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        start:
          implementation: https://raw.githubusercontent.com/dodas-ts/dodas-apps/master/tosca-types/dodas_artifacts/nfs_client.yml
          inputs:
            remote_path: { get_property: [ SELF, remote_path ] }
            local_path: { get_property: [ SELF, local_path ] }
            server_host: { get_property: [ SELF, server_host ] }
